// <auto-generated />
using System;
using FormsWebApplication.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FormsWebApplication.Migrations
{
    [DbContext(typeof(FormsWebAppDbContext))]
    [Migration("20250213182318_Make nullable")]
    partial class Makenullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FormsWebApplication.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomCheckbox1Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomCheckbox1State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomCheckbox2Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomCheckbox2State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomCheckbox3Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomCheckbox3State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomCheckbox4Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomCheckbox4State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomInt1Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomInt1State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomInt2Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomInt2State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomInt3Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomInt3State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomInt4Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomInt4State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomMultiLine1Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomMultiLine1State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomMultiLine2Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomMultiLine2State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomMultiLine3Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomMultiLine3State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomMultiLine4Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomMultiLine4State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomString1Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomString1State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomString2Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomString2State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomString3Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomString3State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomString4Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomString4State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("FormsWebApplication.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FormsWebApplication.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FormsWebApplication.Models.FormsWebApplication.Models.TemplateTag", b =>
                {
                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("TemplateId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TemplateTag");
                });

            modelBuilder.Entity("FormsWebApplication.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId", "TemplateId")
                        .IsUnique();

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("FormsWebApplication.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("TagName")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("FormsWebApplication.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomCheckbox1Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomCheckbox1State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomCheckbox2Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomCheckbox2State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomCheckbox3Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomCheckbox3State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomCheckbox4Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomCheckbox4State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomInt1Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomInt1State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomInt2Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomInt2State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomInt3Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomInt3State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomInt4Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomInt4State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomMultiLine1Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomMultiLine1State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomMultiLine2Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomMultiLine2State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomMultiLine3Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomMultiLine3State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomMultiLine4Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomMultiLine4State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomString1Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomString1State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomString2Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomString2State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomString3Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomString3State")
                        .HasColumnType("bit");

                    b.Property<string>("CustomString4Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomString4State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FormsWebApplication.Models.Answer", b =>
                {
                    b.HasOne("FormsWebApplication.Models.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FormsWebApplication.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormsWebApplication.Models.Comment", b =>
                {
                    b.HasOne("FormsWebApplication.Models.ApplicationUser", null)
                        .WithMany("Comments")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("FormsWebApplication.Models.Template", "Template")
                        .WithMany("Comments")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FormsWebApplication.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormsWebApplication.Models.FormsWebApplication.Models.TemplateTag", b =>
                {
                    b.HasOne("FormsWebApplication.Models.Tag", "Tag")
                        .WithMany("TemplateTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FormsWebApplication.Models.Template", "Template")
                        .WithMany("TemplateTags")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("FormsWebApplication.Models.Like", b =>
                {
                    b.HasOne("FormsWebApplication.Models.ApplicationUser", null)
                        .WithMany("Likes")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("FormsWebApplication.Models.Template", "Template")
                        .WithMany("Likes")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FormsWebApplication.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormsWebApplication.Models.Template", b =>
                {
                    b.HasOne("FormsWebApplication.Models.ApplicationUser", "Author")
                        .WithMany("Templates")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FormsWebApplication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FormsWebApplication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormsWebApplication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FormsWebApplication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FormsWebApplication.Models.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("FormsWebApplication.Models.Tag", b =>
                {
                    b.Navigation("TemplateTags");
                });

            modelBuilder.Entity("FormsWebApplication.Models.Template", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("TemplateTags");
                });
#pragma warning restore 612, 618
        }
    }
}
