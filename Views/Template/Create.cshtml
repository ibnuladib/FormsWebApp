@model FormsWebApplication.Models.Template
@{
	ViewData["Title"] = "Create Template";
}

<style>
    .user-dropdown {
        max-height: 200px;
        overflow-y: auto;
        background: white;
    }

    .badge .btn-close {
        padding: 0.25rem;
        line-height: 1;
    }
</style>
<h2>Create Template</h2>

<form id="CreateTemplateForm" asp-controller="Template" asp-action="Create" method="post">
	@Html.AntiForgeryToken()
	<div class="fom-group">
		<label asp-for="Title">Title</label>
		<input asp-for="Title" class="form-control" required/>
		<span asp-validation-for="Title" class="text-danger"></span>
	</div>
    <div class="mb-3">
        <label for="Description" class="form-label">Description</label>
        <textarea id="Description" name="Description" class="form-control"></textarea>
    </div>

    <div class="form-group">
        <label for="visibility">Visibility</label>
        <select id="visibility" name="Visibility" class="form-control">
            <option value="Public">Public</option>
            <option value="Restricted">Restricted</option>
            <option value="Private">Private</option>
        </select>
    </div>

    <div id="userSelectionContainer" style="display: none;">
        <label for="userSearch">Select Users</label>
        <input type="text" id="userSearch" class="form-control" placeholder="Search users by name or email" />
        <div id="selectedUsers" class="mt-2"></div>
        <input type="hidden" id="selectedUserIds" name="selectedUserIds" />
    </div>

    <input type="hidden" name="tagNames" id="tagValues">
    <div class="mb-3">
        <label for="tagInput" class="form-label">Tags</label>
        <input id="tagInput" placeholder="Enter tags..." class="form-control">
    </div>

	<h4>Custom Questions</h4>
	<button type="button" id="addQuestionBtn" class="btn btn-secondary">+ Add Question</button>
	<div id="questionsContainer"></div>

	<button type="submit" class="btn btn-primary">Create</button>
</form>

<script>
    new EasyMDE({ element: document.getElementById("Description") });
</script>

<script>
    let questionCounts = {
        "CustomString": 0,
        "CustomMultiLine": 0,
        "CustomInt": 0,
        "CustomCheckbox": 0
    };

    document.getElementById("addQuestionBtn").addEventListener("click", function () {
        let container = document.getElementById("questionsContainer");

        let questionTypes = {
            "CustomString": { name: "Single-line", type: "text" },
            "CustomMultiLine": { name: "Multi-line", type: "textarea" },
            "CustomInt": { name: "Positive Integer", type: "textarea" },
            "CustomCheckbox": { name: "Checkbox", type: "text" }
        };

        let questionDiv = document.createElement("div");
        questionDiv.classList.add("form-group", "mb-3");

        let select = document.createElement("select");
        select.classList.add("form-control", "mb-2");
        for (let key in questionTypes) {
            let option = document.createElement("option");
            option.value = key;
            option.textContent = questionTypes[key].name;
            select.appendChild(option);
        }

        let inputField = document.createElement("input");
        inputField.classList.add("form-control");
        inputField.placeholder = "Enter question";

        let hiddenField = document.createElement("input");
        hiddenField.type = "hidden"; // Stores the actual question text

        let stateField = document.createElement("input");
        stateField.type = "hidden"; // Stores true/false for the state

        function updateFieldNames(selectedType) {
            let typeKey = selectedType;
            let count = ++questionCounts[typeKey]; // Increment counter for this type

            let fieldPrefix = typeKey + count; // Example: CustomInt1, CustomInt2, etc.
            hiddenField.name = fieldPrefix + "Question"; // Example: CustomInt1Question
            stateField.name = fieldPrefix + "State"; // Example: CustomInt1State
        }

        select.addEventListener("change", function () {
            let selectedType = select.value;
            updateFieldNames(selectedType);

            let selectedTypeObj = questionTypes[selectedType];
            if (selectedTypeObj.type === "textarea") {
                let textarea = document.createElement("textarea");
                textarea.classList.add("form-control");
                textarea.placeholder = "Enter question";
                textarea.addEventListener("input", function () {
                    hiddenField.value = textarea.value;
                    stateField.value = textarea.value ? "true" : "false";
                });

                questionDiv.replaceChild(textarea, inputField);
                inputField = textarea;
            } else {
                let newInput = document.createElement("input");
                newInput.classList.add("form-control");
                newInput.type = selectedTypeObj.type;
                newInput.placeholder = "Enter question";
                newInput.addEventListener("input", function () {
                    hiddenField.value = newInput.value;
                    stateField.value = newInput.value ? "true" : "false";
                });

                questionDiv.replaceChild(newInput, inputField);
                inputField = newInput;
            }
        });

        inputField.addEventListener("input", function () {
            hiddenField.value = inputField.value;
            stateField.value = inputField.value ? "true" : "false";
        });

        updateFieldNames(select.value);

        questionDiv.appendChild(select);
        questionDiv.appendChild(inputField);
        questionDiv.appendChild(hiddenField);
        questionDiv.appendChild(stateField);
        container.appendChild(questionDiv);
    });
</script>

<script>
        document.addEventListener("DOMContentLoaded", function () {
        const visibilitySelect = document.getElementById('visibility');
        const userSearch = document.getElementById('userSearch');
        const selectedUsersContainer = document.getElementById('selectedUsers');
        const hiddenInput = document.getElementById('selectedUserIds');

        let selectedUsers = [];
        visibilitySelect.addEventListener('change', function () {
            const isRestricted = this.value === 'Restricted';
            document.getElementById('userSelectionContainer').style.display = isRestricted ? 'block' : 'none';

            if (!isRestricted) {
                selectedUsers = [];
                updateSelectedUsers();
            }
        });

        userSearch.addEventListener('input', async function (e) {
            const query = e.target.value.trim();
            if (query.length < 2) return; 
            try {
                const response = await fetch(`/Admin/SearchUsers?query=${encodeURIComponent(query)}`);
                if (!response.ok) throw new Error("Search request failed");
                const users = await response.json();
                showUserDropdown(users);
            } catch (error) {
                console.error('Search failed:', error);
            }
        });

        function showUserDropdown(users) {
            const existingDropdown = document.querySelector('.user-dropdown');
            if (existingDropdown) existingDropdown.remove();

            const dropdown = document.createElement('div');
            dropdown.className = 'user-dropdown list-group mt-1 border rounded';
            dropdown.style.position = 'absolute';
            dropdown.style.zIndex = '1000';
            dropdown.style.width = userSearch.offsetWidth + 'px';

            users.forEach(user => {
                const button = document.createElement('button');
                button.type = 'button';
                button.className = 'list-group-item list-group-item-action';
                button.innerHTML = `
                    <div>${user.firstName} ${user.lastName}</div>
                    <small class="text-muted">${user.email}</small>
                `;
                button.onclick = () => addUser(user);
                dropdown.appendChild(button);
            });

            userSearch.parentNode.appendChild(dropdown);
        }

        function addUser(user) {
            if (!selectedUsers.some(u => u.id === user.id)) {
                selectedUsers.push(user);
                updateSelectedUsers();
                userSearch.value = '';
                document.querySelector('.user-dropdown')?.remove();
            }
        }

        function updateSelectedUsers() {
            hiddenInput.value = selectedUsers.map(u => u.id).join(',');

            selectedUsersContainer.innerHTML = selectedUsers
                .map(user => `
                    <div class="badge bg-primary me-1 mb-1">
                        ${user.firstName} ${user.lastName}
                        <button type="button" class="btn-close btn-close-white ms-1" onclick="removeUser('${user.id}')"></button>
                    </div>
                `).join('');
        }

        window.removeUser = (userId) => {
            selectedUsers = selectedUsers.filter(u => u.id !== userId);
            updateSelectedUsers();
        };

        document.addEventListener("click", function (event) {
            if (!userSearch.contains(event.target)) {
                document.querySelector('.user-dropdown')?.remove();
            }
        });
    });

</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let tagInput = document.querySelector("#tagInput");
        let tagValues = document.querySelector("#tagValues");

        // Initialize Tagify
        let tagify = new Tagify(tagInput, {
            whitelist: [], // Will be updated dynamically
            dropdown: {
                maxItems: 10,
                classname: "tags-dropdown",
                enabled: 1, // Show dropdown as soon as user types
                closeOnSelect: false
            }
        });

        // Fetch existing tags for autocomplete
        tagInput.addEventListener("input", async function () {
            let query = tagInput.value.trim();
            if (query.length < 2) return;

            try {
                let response = await fetch(`/Template/SearchTags?query=${encodeURIComponent(query)}`);
                let tags = await response.json();
                tagify.settings.whitelist = tags.map(tag => tag.name);
                tagify.dropdown.show();
            } catch (error) {
                console.error("Error fetching tags:", error);
            }
        });

        // Update hidden input before form submission
        document.querySelector("form").addEventListener("submit", function () {
            tagValues.value = JSON.stringify(tagify.value.map(tag => tag.value));
        });
    });
</script>


