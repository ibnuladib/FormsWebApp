@model Template

<div class="container">
    <h2>@Model.Title</h2>
    <h3>Description: </h3>
    @using Markdig
    <div class="card-text">
        @Html.Raw(Model.Description != null ? Markdown.ToHtml(Model.Description) : "")
    </div>

    <p>Tags: @string.Join(",", Model.TemplateTags.Select(t => t.Tag.TName))</p>
    <button id="likeButton" class="btn btn-primary" data-template-id="@Model.Id">
        👍 Like (<span id="likeCount">@Model.Likes.Count</span>)
    </button>
    <form method="post" asp-action="SubmitResponse">
        <input type="hidden" name="TemplateId" value="@Model.Id" />

        @if (Model.CustomString1State)
        {
            <div class="mb-3">
                <label>@Model.CustomString1Question</label>
                <input type="text" name="CustomString1Answer" class="form-control" required />
            </div>
        }
        @if (Model.CustomString2State)
        {
            <div class="mb-3">
                <label>@Model.CustomString2Question</label>
                <input type="text" name="CustomString2Answer" class="form-control" required />
            </div>
        }
        @if (Model.CustomString3State)
        {
            <div class="mb-3">
                <label>@Model.CustomString3Question</label>
                <input type="text" name="CustomString3Answer" class="form-control" required />
            </div>
        }
        @if (Model.CustomString4State)
        {
            <div class="mb-3">
                <label>@Model.CustomString4Question</label>
                <input type="text" name="CustomString4Answer" class="form-control" required />
            </div>
        }
        @if (Model.CustomMultiLine1State)
        {
            <div class="mb-3">
                <label>@Model.CustomMultiLine1Question</label>
                <textarea name="CustomMultiLine1Answer" class="form-control"></textarea>
            </div>
        }
        @if (Model.CustomMultiLine2State)
        {
            <div class="mb-3">
                <label>@Model.CustomMultiLine2Question</label>
                <textarea name="CustomMultiLine2Answer" class="form-control"></textarea>
            </div>
        }
        @if (Model.CustomMultiLine3State)
        {
            <div class="mb-3">
                <label>@Model.CustomMultiLine3Question</label>
                <textarea name="CustomMultiLine3Answer" class="form-control"></textarea>
            </div>
        }
        @if (Model.CustomMultiLine4State)
        {
            <div class="mb-3">
                <label>@Model.CustomMultiLine4Question</label>
                <textarea name="CustomMultiLine4Answer" class="form-control"></textarea>
            </div>
        }
        @if (Model.CustomInt1State)
        {
            <div class="mb-3">
                <label>@Model.CustomInt1Question</label>
                <input type="number" name="CustomInt1Answer" class="form-control">
            </div>
        }
        @if (Model.CustomInt2State)
        {
            <div class="mb-3">
                <label>@Model.CustomInt2Question</label>
                <input type="number" name="CustomInt2Answer" class="form-control">
            </div>
        }
        @if (Model.CustomInt3State)
        {
            <div class="mb-3">
                <label>@Model.CustomInt3Question</label>
                <input type="number" name="CustomInt3Answer" class="form-control">
            </div>
        }
        @if (Model.CustomInt4State)
        {
            <div class="mb-3">
                <label>@Model.CustomInt4Question</label>
                <input type="number" name="CustomInt4Answer" class="form-control">
            </div>
        }
        @if (Model.CustomCheckbox1State)
        {
            <div class="mb-3">
                <input type="hidden" name="CustomCheckbox1Answer" value="false" />
                <input type="checkbox" name="CustomCheckbox1Answer" value="true"> @Model.CustomCheckbox1Question
            </div>
        }
        @if (Model.CustomCheckbox2State)
        {
            <div class="mb-3">
                <input type="hidden" name="CustomCheckbox2Answer" value="false" />
                <input type="checkbox" name="CustomCheckbox2Answer" value="true"> @Model.CustomCheckbox2Question
            </div>
        }
        @if (Model.CustomCheckbox3State)
        {
            <div class="mb-3">
                <input type="hidden" name="CustomCheckbox3Answer" value="false" />
                <input type="checkbox" name="CustomCheckbox3Answer" value="true"> @Model.CustomCheckbox3Question
            </div>
        }
        @if (Model.CustomCheckbox4State)
        {
            <div class="mb-3">
                <input type="hidden" name="CustomCheckbox4Answer" value="false" />
                <input type="checkbox" name="CustomCheckbox4Answer" value="true"> @Model.CustomCheckbox4Question
            </div>
        }
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
</div>
<div class="container mt-4">
    <h3>Comments</h3>
    <textarea id="commentContent" class="form-control mt-2" placeholder="Write a comment..."></textarea>
	<button id="submitComment" class="btn btn-primary mt-2">Post Comment</button>    
    <div id="comments-list" class="mt-2"></div>

</div>

<script>
    document.getElementById("likeButton").addEventListener("click", function () {
        let templateId = this.getAttribute("data-template-id");

        fetch(`/Template/Like/${templateId}`, {
            method: "POST",
            headers: {
                "X-Requested-With": "XMLHttpRequest"
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById("likeCount").innerText = data.likeCount;
            } else {
                alert(data.message || "Unable to like the template.");
            }
        })
        .catch(error => console.error("Error:", error));
    });

    document.getElementById("submitComment").addEventListener("click", function(){
        var content = document.getElementById("commentContent").value;
        if(!content.trim()){
            alert("Comment cannot be empty");
            return;
        }

        fetch("/Template/AddComment?templateId=@Model.Id",{
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: "content=" +encodeURIComponent(content)
        })
        .then(response => response.json())
        .then(data => {
            if(data.message)
            {
                document.getElementById("commentContent").value="";
                loadComments();
            }
        });
    });

    function loadComments(){
        fetch("/Template/GetComments?templateId=@Model.Id")
        .then(response => response.json())
        .then(comments => {
                let commentList = document.getElementById("comments-list");
                commentList.innerHTML = "";
                comments.forEach(comment => {
                    commentList.innerHTML += `
                    <div class="comment-box border p-2 mb-2">
                        <strong>${comment.userName}</strong>
                        <small class="text-muted">(${new Date(comment.date).toLocaleString()})</small>
                        <p>${comment.content}</p>
                    </div>`;
             });   
            
        });
    }
    document.addEventListener("DOMContentLoaded",loadComments);
</script>

